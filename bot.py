import os
import logging
from typing import Dict, Any
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandObject
from aiogram.types import (
    KeyboardButton, 
    ReplyKeyboardMarkup, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup,
    Message,
    FSInputFile,
    KeyboardButtonPollType,
    ReplyKeyboardRemove
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.enums import ParseMode
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

if not TOKEN:
    raise ValueError("–ù–µ –∑–∞–¥–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ TELEGRAM_BOT_TOKEN=your_token_here")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î)
cities_data = {
    "moscow": {
        "name": "–ú–æ—Å–∫–≤–∞",
        "description": "–°—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏, –≥–æ—Ä–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
        "attractions": ["–ö—Ä–∞—Å–Ω–∞—è –ø–ª–æ—â–∞–¥—å", "–¢—Ä–µ—Ç—å—è–∫–æ–≤—Å–∫–∞—è –≥–∞–ª–µ—Ä–µ—è", "–ü–∞—Ä–∫ –ì–æ—Ä—å–∫–æ–≥–æ"],
        "food": ["–ú–æ—Å–∫–æ–≤—Å–∫–∏–µ –ø–æ–Ω—á–∏–∫–∏", "–°–µ–ª—ë–¥–∫–∞ –ø–æ–¥ —à—É–±–æ–π", "–ë–µ—Ñ—Å—Ç—Ä–æ–≥–∞–Ω–æ–≤"],
    },
    "spb": {
        "name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
        "description": "–ö—É–ª—å—Ç—É—Ä–Ω–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏",
        "attractions": ["–≠—Ä–º–∏—Ç–∞–∂", "–ü–µ—Ç–µ—Ä–≥–æ—Ñ", "–ò—Å–∞–∞–∫–∏–µ–≤—Å–∫–∏–π —Å–æ–±–æ—Ä"],
        "food": ["–ö–æ—Ä—é—à–∫–∞", "–ü—ã—à–∫–∏", "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∏–π —Ä–∞—Å—Å–æ–ª—å–Ω–∏–∫"],
    },
}

def get_main_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    keyboard = [
        [KeyboardButton(text="üè∞ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")],
        [
            KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True),
            KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç", request_contact=True)
        ],
        [KeyboardButton(text="üìä –°–æ–∑–¥–∞—Ç—å –æ–ø—Ä–æ—Å", request_poll=KeyboardButtonPollType())],
        [KeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ")],
    ]
    return ReplyKeyboardMarkup(
        keyboard=keyboard,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    )

def get_cities_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥–æ—Ä–æ–¥–∞–º–∏ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏"""
    builder = InlineKeyboardBuilder()
    for city_id, city_data in cities_data.items():
        builder.button(
            text=city_data["name"], 
            callback_data=f"city_{city_id}"
        )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å–æ —Å—Å—ã–ª–∫–æ–π
    builder.button(
        text="üîç –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≥–æ—Ä–æ–¥–∞—Ö", 
        url="https://ru.wikipedia.org/wiki/–ì–æ—Ä–æ–¥–∞_–†–æ—Å—Å–∏–∏"
    )
    builder.button(
        text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º",
        switch_inline_query="–ö–ª–∞—Å—Å–Ω—ã–π –±–æ—Ç-–≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥–∞–º!"
    )
    builder.adjust(1)
    return builder.as_markup()

def get_city_keyboard(city_id: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data=f"attractions_{city_id}")
    builder.button(text="üçΩ –ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è", callback_data=f"food_{city_id}")
    builder.button(text="üì∏ –§–æ—Ç–æ –≥–æ—Ä–æ–¥–∞", callback_data=f"photo_{city_id}")
    builder.button(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data=f"review_{city_id}")
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –≥–æ—Ä–æ–¥–æ–≤", callback_data="show_cities")
    builder.adjust(1)
    return builder.as_markup()

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥–∞–º –†–æ—Å—Å–∏–∏. –î–ª—è –ø–æ–∫–∞–∑–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π telegram\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –Ω—ë–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.message(Command("help"))
async def cmd_help(message: Message):
    help_text = """
*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/cities - –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
/hide - –°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
/format - –ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–∫–∞—Ü–∏–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–ø—Ä–æ—Å–æ–≤
‚Ä¢ –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

@dp.message(Command("format"))
async def cmd_format(message: Message):
    format_text = """
*–ö–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ Telegram:*

1Ô∏è‚É£ *–ñ–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç*
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `*—Ç–µ–∫—Å—Ç*`

2Ô∏è‚É£ _–ö—É—Ä—Å–∏–≤–Ω—ã–π —Ç–µ–∫—Å—Ç_
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `_—Ç–µ–∫—Å—Ç_`

3Ô∏è‚É£ __–ü–æ–¥—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç__
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `__—Ç–µ–∫—Å—Ç__`

4Ô∏è‚É£ ~–ó–∞—á—ë—Ä–∫–Ω—É—Ç—ã–π —Ç–µ–∫—Å—Ç~
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `~—Ç–µ–∫—Å—Ç~`

5Ô∏è‚É£ ||–°–ø–æ–π–ª–µ—Ä||
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `||—Ç–µ–∫—Å—Ç||`

6Ô∏è‚É£ `–ú–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç`
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \\`—Ç–µ–∫—Å—Ç\\`

7Ô∏è‚É£ –ë–ª–æ–∫ –∫–æ–¥–∞:
```python
def hello():
    print('Hello!')
```
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: \\`\\`\\`—è–∑—ã–∫
–≤–∞—à –∫–æ–¥
\\`\\`\\`

8Ô∏è‚É£ [–°—Å—ã–ª–∫–∞](https://telegram.org)
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `[—Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–∏](url)`

üí° *–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∏–ª–µ–π:*
–ú–æ–∂–Ω–æ *_–∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å_* —Ä–∞–∑–Ω—ã–µ __*—Å—Ç–∏–ª–∏*__ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

‚ö†Ô∏è *–í–∞–∂–Ω–æ:*
‚Ä¢ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∏–º–≤–æ–ª —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ \\ –ø–µ—Ä–µ–¥ –Ω–∏–º
‚Ä¢ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω—É–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å: \\. , ! [ ] ( ) { } > # + - = | { } ~ $
    """
    await message.answer(format_text, parse_mode=ParseMode.MARKDOWN_V2)

@dp.message(Command("hide"))
async def cmd_hide_keyboard(message: Message):
    await message.answer(
        "–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –µ—ë —Å–Ω–æ–≤–∞.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(F.location)
async def handle_location(message: Message):
    await message.answer(
        f"üìç –ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:\n–®–∏—Ä–æ—Ç–∞: {message.location.latitude}\n–î–æ–ª–≥–æ—Ç–∞: {message.location.longitude}"
    )

@dp.message(F.contact)
async def handle_contact(message: Message):
    await message.answer(
        f"üì± –ü–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç:\n–ò–º—è: {message.contact.first_name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {message.contact.phone_number}"
    )

@dp.message(F.poll)
async def handle_poll(message: Message):
    await message.answer("üìä –û–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω!")

@dp.callback_query(F.data.startswith("photo_"))
async def show_city_photo(callback: types.CallbackQuery):
    city_id = callback.data.split("_")[1]
    city = cities_data[city_id]
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ –≥–æ—Ä–æ–¥–∞
    await callback.message.answer_photo(
        FSInputFile("path_to_photo.jpg") if os.path.exists("path_to_photo.jpg") else "https://via.placeholder.com/400x300",
        caption=f"üì∏ –§–æ—Ç–æ –≥–æ—Ä–æ–¥–∞ {city['name']}"
    )

@dp.callback_query(F.data.startswith("review_"))
async def start_review(callback: types.CallbackQuery):
    city_id = callback.data.split("_")[1]
    city = cities_data[city_id]
    
    await callback.message.answer(
        f"üìù –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ –æ –≥–æ—Ä–æ–¥–µ {city['name']}.\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_review")
        ]])
    )

@dp.message(F.text == "üè∞ –í—ã–±—Ä–∞—Ç—å –≥–æ—Ä–æ–¥")
async def show_cities(message: Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_cities_keyboard()
    )

@dp.message(F.text == "‚ÑπÔ∏è –û –±–æ—Ç–µ")
async def about_bot(message: Message):
    await message.answer(
        "ü§ñ –Ø –±–æ—Ç-–≥–∏–¥ –ø–æ –≥–æ—Ä–æ–¥–∞–º –†–æ—Å—Å–∏–∏.\n"
        "–Ø –º–æ–≥—É —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤–∞–º –æ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö, –∏—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è—Ö –∏ –º–µ—Å—Ç–Ω–æ–π –∫—É—Ö–Ω–µ.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data.startswith("city_"))
async def show_city_info(callback: types.CallbackQuery):
    city_id = callback.data.split("_")[1]
    city = cities_data[city_id]
    
    await callback.message.edit_text(
        f"üè∞ {city['name']}\n\n"
        f"{city['description']}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_city_keyboard(city_id)
    )

@dp.callback_query(F.data.startswith("attractions_"))
async def show_attractions(callback: types.CallbackQuery):
    city_id = callback.data.split("_")[1]
    city = cities_data[city_id]
    
    attractions_text = "\n‚Ä¢ ".join([""] + city["attractions"])
    await callback.message.edit_text(
        f"üèõ –î–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ {city['name']}:{attractions_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_city_keyboard(city_id)
    )

@dp.callback_query(F.data.startswith("food_"))
async def show_food(callback: types.CallbackQuery):
    city_id = callback.data.split("_")[1]
    city = cities_data[city_id]
    
    food_text = "\n‚Ä¢ ".join([""] + city["food"])
    await callback.message.edit_text(
        f"üçΩ –ú–µ—Å—Ç–Ω–∞—è –∫—É—Ö–Ω—è {city['name']}:{food_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_city_keyboard(city_id)
    )

@dp.callback_query(F.data == "show_cities")
async def back_to_cities(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:",
        reply_markup=get_cities_keyboard()
    )

@dp.message(Command("cities"))
async def cmd_cities(message: Message):
    await message.answer(
        "üè∞ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:",
        reply_markup=get_cities_keyboard()
    )

async def main():
    logging.basicConfig(level=logging.INFO)
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
    await bot.set_my_commands([
        types.BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="help", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"),
        types.BotCommand(command="cities", description="–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤"),
        types.BotCommand(command="hide", description="–°–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"),
        types.BotCommand(command="format", description="–ü—Ä–∏–º–µ—Ä—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    ])
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main()) 